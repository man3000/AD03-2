/*
 * GUI para eliminar productos
 */
package com.ad03.ad03;

import java.awt.Color;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Manuel
 */
public class modifyEmpleadosHoras extends javax.swing.JDialog {

    HashMap<String, Integer> tiendasMap = new HashMap<>();
    HashMap<String, Integer> empleadosMap = new HashMap<>();

    /**
     * Creates new form removeProducto
     *
     * @param parent
     * @param modal
     */
    public modifyEmpleadosHoras(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        setLocation(parent.getLocation());
        fijarModeloTiendas();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBoxTiendas = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jComboBoxEmpleados = new javax.swing.JComboBox<>();
        jButton_modificarStockProducto_cancelar = new javax.swing.JButton();
        jButton_modificarStockProducto_modificar = new javax.swing.JButton();
        jTextFieldHoras = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Seleccione Tienda:");

        jComboBoxTiendas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxTiendasActionPerformed(evt);
            }
        });

        jLabel2.setText("Seleccione Empleado:");

        jComboBoxEmpleados.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxEmpleadosActionPerformed(evt);
            }
        });

        jButton_modificarStockProducto_cancelar.setText("Cancelar");
        jButton_modificarStockProducto_cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_modificarStockProducto_cancelarActionPerformed(evt);
            }
        });

        jButton_modificarStockProducto_modificar.setText("Modificar");
        jButton_modificarStockProducto_modificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_modificarStockProducto_modificarActionPerformed(evt);
            }
        });

        jLabel3.setText("Horas semanales: ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton_modificarStockProducto_modificar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton_modificarStockProducto_cancelar))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addGap(214, 214, 214)
                            .addComponent(jTextFieldHoras, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1)
                                .addComponent(jLabel2))
                            .addGap(42, 42, 42)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jComboBoxTiendas, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jComboBoxEmpleados, 0, 220, Short.MAX_VALUE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jComboBoxTiendas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBoxEmpleados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldHoras, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton_modificarStockProducto_cancelar)
                    .addComponent(jButton_modificarStockProducto_modificar))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxTiendasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxTiendasActionPerformed
        // TODO add your handling code here:
        fijarModeloEmpleados();
    }//GEN-LAST:event_jComboBoxTiendasActionPerformed

    private void jButton_modificarStockProducto_cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_modificarStockProducto_cancelarActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton_modificarStockProducto_cancelarActionPerformed

    private void jButton_modificarStockProducto_modificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_modificarStockProducto_modificarActionPerformed
        // TODO add your handling code here:
        if (jComboBoxEmpleados.getItemCount() != 0 && jComboBoxTiendas.getItemCount() != 0) {
            String tien = (String) this.jComboBoxTiendas.getSelectedItem();
            String emp = (String) this.jComboBoxEmpleados.getSelectedItem();
            int idTienda_eliminar = this.tiendasMap.get(tien);
            int idEmpleado_eliminar = this.empleadosMap.get(emp);
            int hr;

            try {
                hr = Integer.parseInt(this.jTextFieldHoras.getText());

                if (JOptionPane.showConfirmDialog(this, "¿Está seguro?", "Advertencia", JOptionPane.OK_CANCEL_OPTION) == JOptionPane.OK_OPTION) {
                    VentanaPrincipal.insertarEmpleadoTienda(idTienda_eliminar, idEmpleado_eliminar, hr);
                    this.dispose();
                }

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Las horas no están en el formato correcto", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "No existen tiendas o éstas no tienen empleados", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton_modificarStockProducto_modificarActionPerformed

    private void jComboBoxEmpleadosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxEmpleadosActionPerformed
        fijarHorasEmpleado();
    }//GEN-LAST:event_jComboBoxEmpleadosActionPerformed

    /**
     * @param args the command line arguments
     */
    /**
     * Con este método establecemos los elementos que se muestran en el
     * desplegable
     */
    public void fijarModeloTiendas() {
        String sql = "SELECT * FROM Tiendas ORDER BY nombre ASC";

        ArrayList<String> cadena = new ArrayList<>();

        Connection con = VentanaPrincipal.connectDatabase();

        try {
            Statement statement = con.createStatement();
            ResultSet rs = statement.executeQuery(sql);

            while (rs.next()) {
                this.tiendasMap.put(rs.getString("nombre") + " - " + rs.getString("ciudad"), rs.getInt("idTienda"));
                cadena.add(rs.getString("nombre") + " - " + rs.getString("ciudad"));
            }
        } catch (SQLException ex) {
            Logger.getLogger(addTienda.class.getName()).log(Level.SEVERE, null, ex);
        }

        DefaultComboBoxModel model = new DefaultComboBoxModel(cadena.toArray());
        this.jComboBoxTiendas.setModel(model);

        if (jComboBoxTiendas.getItemCount() != 0) {
            
            fijarModeloEmpleados();

        }

    }

    /**
     * Con este método establecemos los elementos que se muestran en el
     * desplegable
     */
    public void fijarModeloEmpleados() {

        if (jComboBoxTiendas.getItemCount() != 0) {
            
            String i = (String) this.jComboBoxTiendas.getSelectedItem();
            int idTienda = this.tiendasMap.get(i);
            
            String sql = "SELECT * FROM Empleados WHERE idEmpleado IN (SELECT Empleados_idEmpleado FROM Tiendas_Empleados WHERE Tiendas_idTienda = ("
                    + idTienda + "))ORDER BY nombre ASC";
            
            ArrayList<String> cadena = new ArrayList<>();
            
            Connection con = VentanaPrincipal.connectDatabase();
            
            try {
                Statement statement = con.createStatement();
                ResultSet rs = statement.executeQuery(sql);
                
                while (rs.next()) {
                    this.empleadosMap.put(rs.getString("nombre") + " " + rs.getString("apellidos"), rs.getInt("idEmpleado"));
                    cadena.add(rs.getString("nombre") + " " + rs.getString("apellidos"));
                }
            } catch (SQLException ex) {
                Logger.getLogger(addTienda.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            DefaultComboBoxModel model = new DefaultComboBoxModel(cadena.toArray());            
            this.jComboBoxEmpleados.setModel(model);
            
            if (jComboBoxEmpleados.getItemCount() == 0) {
                this.jTextFieldHoras.setText("N/A");
            } else {
                fijarHorasEmpleado();
            }
        }
    }

    public void fijarHorasEmpleado() {

        if (jComboBoxEmpleados.getItemCount() != 0) {
            String tien = (String) this.jComboBoxTiendas.getSelectedItem();
            String emp = (String) this.jComboBoxEmpleados.getSelectedItem();
            
            int idTienda_modificar = this.tiendasMap.get(tien);
            int idEmpleado_modificar = this.empleadosMap.get(emp);
            String hr = "";
            String sql = "SELECT * FROM Tiendas_Empleados WHERE Tiendas_idTienda = "
                    + idTienda_modificar + " AND Empleados_idEmpleado = "
                    + idEmpleado_modificar + ";";
            
            Connection con = VentanaPrincipal.connectDatabase();
            
            try {
                Statement statement = con.createStatement();
                ResultSet rs = statement.executeQuery(sql);
                
                while (rs.next()) {
                    hr = Integer.toString(rs.getInt("horas_semanales"));
                }
            } catch (SQLException ex) {
                System.out.println(ex.getMessage());
            }
            
            this.jTextFieldHoras.setText(hr);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_modificarStockProducto_cancelar;
    private javax.swing.JButton jButton_modificarStockProducto_modificar;
    private javax.swing.JComboBox<String> jComboBoxEmpleados;
    private javax.swing.JComboBox<String> jComboBoxTiendas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField jTextFieldHoras;
    // End of variables declaration//GEN-END:variables

    public void deshabilitarCasillaStock() {
        this.jTextFieldHoras.setEditable(false);
        this.jTextFieldHoras.setBackground(Color.lightGray);
    }
}
