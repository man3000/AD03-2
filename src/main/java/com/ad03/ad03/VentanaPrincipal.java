/*
 * GUI de la ventana principal
 */
package com.ad03.ad03;

import com.ad03.db.ConectarDB;
import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

/**
 *
 * @author Manuel Alejandro Álvarez Pérez
 */
public class VentanaPrincipal extends javax.swing.JFrame {
    
    //Variables estáticas
    
    static Empresa Empresa = new Empresa();
    static ArrayList<Tienda> Tiendas = new ArrayList<>();
    static ArrayList<Cliente> Clientes = new ArrayList<>();
    static String nombre, ciudad;
    static Gson gson = new Gson();
    static String json;
    static final File dataJson= new File("data.json");
    static ArrayList<String> titularesRSS = new ArrayList<>();
    
    /**
     * Constructor principal que posiciona la ventana en el centro de la pantalla
     * 
     */
    public VentanaPrincipal() {
        initComponents();
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        int x = d.width/2;
        int y = d.height/2;
        this.setLocation(x - this.getWidth() / 2, y - this.getHeight() / 2);
        
        validarArchivoJson(dataJson);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        archivoMenu = new javax.swing.JMenu();
        importar = new javax.swing.JMenuItem();
        copiaSeguridad = new javax.swing.JMenuItem();
        jMenuItemVerDatos = new javax.swing.JMenuItem();
        salir = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItemVerTiendas = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jMenuItem12 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sistema de Gestión");
        setLocation(new java.awt.Point(500, 500));
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("American Typewriter", 0, 48)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Gestión");
        jLabel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(new java.awt.Color(153, 255, 153), null));

        archivoMenu.setText("Archivo");

        importar.setText("Importar");
        importar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importarActionPerformed(evt);
            }
        });
        archivoMenu.add(importar);

        copiaSeguridad.setText("Crear copia de seguridad");
        copiaSeguridad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copiaSeguridadActionPerformed(evt);
            }
        });
        archivoMenu.add(copiaSeguridad);

        jMenuItemVerDatos.setText("Visualizar los datos");
        jMenuItemVerDatos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemVerDatosActionPerformed(evt);
            }
        });
        archivoMenu.add(jMenuItemVerDatos);

        salir.setText("Salir");
        salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirActionPerformed(evt);
            }
        });
        archivoMenu.add(salir);

        jMenuBar1.add(archivoMenu);

        jMenu2.setText("Tienda");

        jMenuItem3.setText("Añadir");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItemVerTiendas.setText("Ver Tiendas");
        jMenuItemVerTiendas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemVerTiendasActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItemVerTiendas);

        jMenuItem4.setText("Eliminar");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuBar1.add(jMenu2);

        jMenu5.setText("Producto");

        jMenuItem5.setText("Añadir");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem5);

        jMenuItem6.setText("Eliminar");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem6);

        jMenuBar1.add(jMenu5);

        jMenu3.setText("Empleado");

        jMenuItem7.setText("Añadir");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem7);

        jMenuItem8.setText("Eliminar");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem8);

        jMenuBar1.add(jMenu3);

        jMenu4.setText("Cliente      ");

        jMenuItem9.setText("Añadir");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem9);

        jMenuItem10.setText("Eliminar");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem10);

        jMenuBar1.add(jMenu4);

        jMenu6.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jMenu6.setText("Titulares RSS");
        jMenu6.setBorderPainted(true);
        jMenu6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jMenu6.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jMenu6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu6ActionPerformed(evt);
            }
        });

        jMenuItem12.setText("Ver titulares El País");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem12);

        jMenuBar1.add(jMenu6);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(122, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(122, 122, 122))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(61, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        if (hayTiendas()){
            removeProducto removeproducto = new removeProducto(this, true);
            removeproducto.setLocation(this.getLocation());
            removeproducto.fijarModelo();
            removeproducto.fijarModeloProductos();
            removeproducto.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "No existen tiendas");
        }
        
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        addTienda addtienda = new addTienda(this, true);
        addtienda.setLocation(this.getLocation());
        addtienda.setVisible(true);
        
        
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        if (hayTiendas()){
            addProducto addproducto = new addProducto(this, true);
            addproducto.fijarModelo();
            addproducto.setLocation(this.getLocation());
            addproducto.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "No existen tiendas");
        }
        

    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void copiaSeguridadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copiaSeguridadActionPerformed
        try {
            // TODO add your handling code here:
            File file = new File(dataJson.getPath() + ".backup");
            DataInputStream input = new DataInputStream(new FileInputStream(dataJson));
            DataOutputStream output = new DataOutputStream(new FileOutputStream(file));
            int i;
            while((i = input.read()) != -1){
                output.write(i);
            }
            input.close();
            output.close();
            JOptionPane.showMessageDialog(this, "Copia de seguridad creada con éxito");
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_copiaSeguridadActionPerformed

    private void salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirActionPerformed
        // TODO add your handling code here:
        int option = JOptionPane.showConfirmDialog(this, "¿Confirma que desea salir de la aplicación? ", "Confirmación", JOptionPane.YES_NO_OPTION);
        if (option == JOptionPane.YES_OPTION)
            System.exit(0);
        
    }//GEN-LAST:event_salirActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        // TODO add your handling code here:
        if (hayTiendas()){
            addEmpleado addempleado = new addEmpleado(this, true);
            addempleado.fijarModelo();
            addempleado.setLocation(this.getLocation());
            addempleado.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "No existen tiendas");
        }
        
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        // TODO add your handling code here:
        addCliente addcliente = new addCliente(this, true);
        addcliente.setLocation(this.getLocation());
        addcliente.setVisible(true);
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void importarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importarActionPerformed
        // TODO add your handling code here:
        JFileChooser chooser = new JFileChooser();
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION){
            validarArchivoJson(chooser.getSelectedFile());
            actualizarJson();
        }
    }//GEN-LAST:event_importarActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        if (hayTiendas()){
            removeTienda removetienda = new removeTienda(this, true);
            removetienda.fijarModelo();
            removetienda.setLocation(this.getLocation());
            removetienda.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "No existen tiendas");
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // TODO add your handling code here:
        if (hayTiendas()){
            removeEmpleado removeempleado = new removeEmpleado(this, true);
            removeempleado.fijarModelo();
            removeempleado.fijarModeloEmpleado();
            removeempleado.setLocation(this.getLocation());
            removeempleado.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "No existen tiendas");
        }
        
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        // TODO add your handling code here:
        if (!Empresa.Clientes.isEmpty()){
            removeCliente removecliente = new removeCliente(this, true);
            removecliente.setLocation(this.getLocation());
            removecliente.fijarModelo();
            removecliente.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(this, "No existen clientes");
        }
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenu6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu6ActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jMenu6ActionPerformed

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
        // TODO add your handling code here:
        TitularesRSS titularesrss = new TitularesRSS(this, true);
        titularesrss.escribirTitulares(titularesRSS);
        titularesrss.setLocation(this.getLocation());
        titularesrss.setVisible(true);
    }//GEN-LAST:event_jMenuItem12ActionPerformed

    private void jMenuItemVerDatosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemVerDatosActionPerformed
        // TODO add your handling code here:
        Datos datos = new Datos(this, true);
        datos.setLocation(this.getLocation());
        datos.setVisible(true);
        
    }//GEN-LAST:event_jMenuItemVerDatosActionPerformed

    private void jMenuItemVerTiendasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemVerTiendasActionPerformed
        // TODO add your handling code here:
        ConectarDB conectarDB = new ConectarDB();
        conectarDB.selectAll();
    }//GEN-LAST:event_jMenuItemVerTiendasActionPerformed

    
    /**
     * Con este método analizamos el archivo "data.json" y comprobamos que el archivo 
     * sea un archivo json válido para nuestra aplicación
     */
    private void validarArchivoJson(File f){
        File file = f;
        if (file.exists()){
            try {
                
                BufferedReader input = new BufferedReader(new FileReader(file));

                StringBuilder injson = new StringBuilder("");
                String s;
                while((s = input.readLine()) != null){
                    injson.append(s);
                    
                }
                
                VentanaPrincipal.Empresa = gson.fromJson(injson.toString(), Empresa.class);
                
                if (Objects.isNull(VentanaPrincipal.Empresa)){
                    VentanaPrincipal.Empresa = new Empresa();
                }
            } catch (IOException e){
                System.out.println(e.getMessage());
            } catch (JsonSyntaxException e){
                
                int option;
                
                if (f.equals(dataJson)){
                    option = JOptionPane.showConfirmDialog(this, "El archivo json.data no es válido ¿desea borarlo y crear uno vacío?", "Error archivo", JOptionPane.YES_NO_OPTION);
                    
                    if (option == JOptionPane.YES_OPTION){
                        file.delete();
                        File file2 = new File("data.json");
                        try {
                            file2.createNewFile();
                        } catch (IOException ex) {
                            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    } else {
                        System.exit(0);
                    }
                }
                else
                    JOptionPane.showMessageDialog(this, "El archivo seleccionado no es válido ", "Error archivo", JOptionPane.OK_OPTION);
                    
                
            }
        } else {
            JOptionPane.showConfirmDialog(this, "No se encuentra el archivo data.json por lo que se creará uno vacío");
        }
    }
    
    /**
     * Con este método actualizamos el archivo de trabajo "data.json"
     */
    public static void actualizarJson(){
        
        json = gson.toJson(Empresa);
        
        try {
            FileWriter escritura = new FileWriter(dataJson);
            escritura.write(json);
            escritura.close();
        } catch (IOException ex) {
            System.out.println("Error en la ruta");
        }
        
    }
    
    /**
     * Comprobamos si exixten tiendas en la empresa
     */    
    private boolean hayTiendas(){
        if (Empresa.Tiendas.isEmpty())
                return false;
        else return true;
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        
        
        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPrincipal().setVisible(true);
            }
        });
        
        try {
            SAXParserFactory saxParserFactory = SAXParserFactory.newInstance();
            
            URL url = new URL("http://ep00.epimg.net/rss/elpais/portada.xml");
            
            InputStream stream = url.openStream();
            
            SAXParser saxParser = saxParserFactory.newSAXParser();
            
            Handler handler = new Handler();
            
            saxParser.parse(new InputSource(stream), handler);
            
            titularesRSS = handler.getTitulares();
            
        } catch (ParserConfigurationException | SAXException | IOException ex) {
            titularesRSS.add("Error en el XML o no existe conexión a Internet");
        }
        
        
    }
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu archivoMenu;
    private javax.swing.JMenuItem copiaSeguridad;
    private javax.swing.JMenuItem importar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JMenuItem jMenuItemVerDatos;
    private javax.swing.JMenuItem jMenuItemVerTiendas;
    private javax.swing.JMenuItem salir;
    // End of variables declaration//GEN-END:variables
}
